{"version":3,"sources":["utils/fetch.js","components/NextPrevPageButtons.jsx","components/Photo.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["api_key","get","url","a","fetch","fetchResponse","json","data","ok","getManifest","rover","getPhotosBySol","sol","NextPrevPageButtons","props","slice","onClick","handleLoadMore","sliceEnd","solInfo","total_photos","Photo","state","loaded","className","this","onLoad","setState","src","p","img_src","alt","name","id","camera","full_name","earth_date","evt","handleClickLike","style","likes","backgroundColor","color","Component","App","rovers","landing_date","launch_date","max_date","max_sol","photos","status","empty","solPicker","photosPerPage","handleChange","target","parseInt","value","handleRequestPhotos","preventDefault","find","e","loading","length","dir","handleSelectRover","photo_manifest","newLikes","map","i","onSubmit","htmlFor","type","min","max","onChange","required","cameras","c","Math","ceil","Array","from","to","spy","smooth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50b9b260.chunk.js","sourcesContent":["const api_key = 'fUwiBPvvBwZXfky5QXVrVsSlOmRHlLQXnnZv03dI'\n\nasync function get(url){\n  const fetchResponse = await fetch(url)\n  let data = await fetchResponse.json();\n  if (!fetchResponse.ok) throw data;\n  return data;\n}\n\nexport async function getManifest(rover){\n  const url = `https://api.nasa.gov/mars-photos/api/v1/manifests/${rover}/?api_key=${api_key}`\n  const data = await get(url)\n  return data;\n}\n\nexport async function getPhotosBySol(rover, sol){\n  const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos?sol=${sol}&api_key=${api_key}`\n  const data = await get(url)\n  return data;\n}","export default function NextPrevPageButtons(props){\n  return(\n    <>\n      {props.slice > 0 && \n        <button onClick={()=>props.handleLoadMore(-1)}>Previous page</button>\n      }\n      {props.sliceEnd !== props.solInfo.total_photos && \n        <button onClick={()=>props.handleLoadMore(1)}>Next page</button>\n      } \n    </>\n  )\n}","import { Component } from \"react\";\nimport './Photo.css';\n\nexport default class Photo extends Component{\n\n  state = {\n    loaded: false\n  }\n\n  render(){\n    return(\n      <li>\n        <figure className={this.state.loaded ? null : 'loading'}>\n          <img \n            onLoad={() => this.setState({loaded: true})}\n            src={this.props.p.img_src} \n            alt={`Mars rover ${this.props.rover.name} photo id ${this.props.p.id}, taken with ${this.props.p.camera.full_name} on ${this.props.p.earth_date}`}\n          />\n          <figcaption>\n            <div>ID: {this.props.p.id}</div>\n            <div>Camera: {this.props.p.camera.full_name}</div>\n            <div>Earth Date: {this.props.p.earth_date}</div>\n          </figcaption>\n        </figure>\n        <button onClick={ evt => this.props.handleClickLike(this.props.p.id) } style={this.props.likes[this.props.p.id] ? {backgroundColor:\"pink\", color:\"black\"} : {} }>\n          {this.props.likes[this.props.p.id] ? \"Unlike\" : \"Like\"}\n        </button>\n      </li>\n    )\n  }\n}","import { Component } from \"react\";\nimport { getManifest, getPhotosBySol } from \"./utils/fetch\";\nimport {Link} from 'react-scroll'\nimport './App.css';\nimport NextPrevPageButtons from \"./components/NextPrevPageButtons\";\nimport Photo from \"./components/Photo\";\n\nexport default class App extends Component{\n\n  state = {\n    rovers: ['Curiosity','Perseverance','Opportunity','Spirit'],\n    rover:{\n      name:'',\n      landing_date:'',\n      launch_date:'',\n      max_date:'',\n      max_sol:'',\n      photos:[],\n      status:'',\n      total_photos:'',\n    },\n    solInfo:{empty:true},\n    solPicker:0,\n    sol:'',\n    photos:[],\n    slice:0,\n    likes:{},\n    photosPerPage:8\n  }\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: parseInt(evt.target.value),\n    });\n  };\n\n  handleRequestPhotos = async (evt) => {\n    evt.preventDefault();\n    this.setState({\n      sol: this.state.solPicker\n    })\n    const solInfo = this.state.rover.photos.find(e => e.sol === this.state.solPicker)\n    if (typeof solInfo === 'undefined'){\n      this.setState({\n        solInfo: {empty: true},\n        photos:[]\n      })\n    }\n    else{\n      this.setState({\n        solInfo: {\n          empty: false,\n          ...solInfo\n        },\n        loading: true\n      })\n\n      let data = await getPhotosBySol(this.state.rover.name, this.state.sol)\n      // For some reason, the API sometimes gives back an empty object when it ought not too\n      // In these cases, just try it one more time\n      if (data.length !== this.state.solInfo.total_photos){\n        data = await getPhotosBySol(this.state.rover.name, this.state.sol)\n      }\n      this.setState({\n        loading: false,\n        photos: data.photos,\n        slice:0,\n        sliceEnd: \n          this.state.photosPerPage > this.state.solInfo.total_photos ? \n            this.state.solInfo.total_photos \n          : this.state.photosPerPage\n      })\n    }\n  }\n\n  handleLoadMore = (dir) => {\n    if (this.state.sliceEnd === this.state.solInfo.total_photos){\n      this.setState({\n        slice: this.state.slice - this.state.photosPerPage,\n        sliceEnd: this.state.slice\n      })\n    }\n    else{\n      this.setState({\n        slice: this.state.slice + (this.state.photosPerPage * dir),\n        sliceEnd: \n          this.state.sliceEnd + (this.state.photosPerPage * dir) > this.state.solInfo.total_photos ? \n              this.state.solInfo.total_photos \n            : this.state.sliceEnd + (this.state.photosPerPage * dir)\n      })\n    }\n  }\n\n  handleSelectRover = async (rover) => {\n    const data = await getManifest(rover)\n    this.setState({\n      rover:data.photo_manifest,\n      photos:[],\n      slice:0,\n      sol:''\n    })\n  }\n\n  handleClickLike = (id) => {\n    const newLikes = this.state.likes\n    newLikes[id] = !newLikes[id]\n    this.setState({\n      likes:newLikes\n    })\n  }\n\n  render(){ \n    return(\n      <div>\n        <h1>Spacestagram</h1>\n        <header>\n          <div>\n            <h2>Select a rover</h2>\n            <ul className=\"rover-list\">\n              {this.state.rovers.map((rover,i)=>(\n                <li \n                  className={rover===this.state.rover.name ? 'current':''} \n                  key={i} \n                  onClick={()=>this.handleSelectRover(rover)}\n                >\n                  {rover}\n                </li>\n              ))}\n            </ul>\n          </div>\n          {this.state.rover.name && \n            <div>\n              <h2>{this.state.rover.name}</h2>\n              <p>Launch date: <span>{this.state.rover.launch_date}</span></p>\n              <p>Landing date: <span>{this.state.rover.landing_date}</span></p>\n              <p>Latest day with photos: <span>{this.state.rover.max_date}</span></p>\n              <p>Martian days (Sols) with photos: <span>{this.state.rover.max_sol}</span></p>\n              <p>Status: <span>{this.state.rover.status}</span></p>\n              <p>Total Photos: <span>{this.state.rover.total_photos}</span></p>\n    \n              <form onSubmit={this.handleRequestPhotos}>\n                <label htmlFor=\"solPicker\">Show me photos from Sol day:</label>\n                <span>\n                  <input \n                    type=\"number\" \n                    id=\"solPicker\"\n                    name=\"solPicker\" \n                    min=\"0\" \n                    max={this.state.rover.max_sol} \n                    value={this.state.solPicker} \n                    onChange={this.handleChange} \n                    required \n                  />\n                  <button className=\"bg-white\" type=\"submit\">Go</button>\n                </span>\n              </form>\n            </div>\n          }\n          {typeof this.state.sol === 'number' &&\n            <div>\n              <h2>Sol {this.state.sol}</h2>\n              {this.state.solInfo.empty ? \n                <p>No photos from this date</p> \n              : \n                <>\n                  <p>Earth Date: <span>{this.state.solInfo.earth_date}</span></p>\n                  <p>Total Photos: <span>{this.state.solInfo.total_photos}</span></p>\n                  <h3>Cameras in use:</h3>\n                  <ul>\n                    {this.state.solInfo.cameras.map((c,i) => (\n                      <li key={i}>{c}</li>\n                    ))}\n                  </ul>\n                </>\n              }\n            </div>\n          }\n        </header>\n        \n        <main id=\"main\">\n          {this.state.photos.length > 0 && \n            <>\n              <p>Sol {this.state.sol} | Photos {this.state.slice+1} - {this.state.sliceEnd} | Page {Math.ceil(this.state.sliceEnd / this.state.photosPerPage)}/{Math.ceil(this.state.solInfo.total_photos / this.state.photosPerPage)}</p>\n              <NextPrevPageButtons {...this.state} handleLoadMore={this.handleLoadMore}/>\n            </>\n          }\n          <ul>\n            {this.state.loading ?\n              Array.from(Array(this.state.photosPerPage)).map((p,i)=>(\n                <li key={i} className=\"loading\">\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                  <div></div>\n                </li>\n              ))\n            : ''}{\n              this.state.photos.slice(this.state.slice, this.state.sliceEnd).map( p => (\n                <Photo key={p.id} {...this.state} p={p} handleClickLike={this.handleClickLike}/>\n              ))\n            }\n          </ul>\n          {this.state.photos.length > 0 && \n            <Link  to=\"main\" spy={false} smooth={true}>\n              <NextPrevPageButtons {...this.state} handleLoadMore={this.handleLoadMore}/>\n            </Link>\n          }\n        </main>\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}