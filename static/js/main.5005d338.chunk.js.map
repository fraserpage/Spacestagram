{"version":3,"sources":["utils/fetch.js","App.js","reportWebVitals.js","index.js"],"names":["api_key","get","url","a","fetch","fetchResponse","json","data","ok","getManifest","rover","getPhotosBySol","sol","rovers","App","state","name","landing_date","launch_date","max_date","max_sol","photos","status","total_photos","slice","likes","handleChange","evt","setState","target","value","handleRequestPhotos","preventDefault","console","log","handleLoadMore","handleSelectRover","photo_manifest","handleClickLike","id","newLikes","className","map","i","onClick","this","onSubmit","type","min","max","onChange","required","length","p","src","img_src","alt","camera","full_name","earth_date","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAAMA,EAAU,2C,SAEDC,E,8EAAf,WAAmBC,GAAnB,iBAAAC,EAAA,sEAC8BC,MAAMF,GADpC,cACQG,EADR,gBAEmBA,EAAcC,OAFjC,UAEMC,EAFN,OAGOF,EAAcG,GAHrB,sBAG+BD,EAH/B,gCAISA,GAJT,4C,sBAOO,SAAeE,EAAtB,kC,4CAAO,WAA2BC,GAA3B,iBAAAP,EAAA,6DACCD,EADD,4DAC4DQ,EAD5D,qBAC8EV,GAD9E,SAEcC,EAAIC,GAFlB,cAECK,EAFD,yBAGEA,GAHF,4C,sBAMA,SAAeI,EAAtB,oC,4CAAO,WAA8BD,EAAOE,GAArC,iBAAAT,EAAA,6DACCD,EADD,yDACyDQ,EADzD,uBAC6EE,EAD7E,oBAC4FZ,GAD5F,SAEcC,EAAIC,GAFlB,cAECK,EAFD,yBAGEA,GAHF,4C,uCCXDM,EAAS,CAAC,YAAY,eAAe,cAAc,UAEpCC,E,4MAEnBC,MAAQ,CACNL,MAAM,CACJM,KAAK,GACLC,aAAa,GACbC,YAAY,GACZC,SAAS,GACTC,QAAQ,GACRC,OAAO,GACPC,OAAO,GACPC,aAAa,IAEfX,IAAI,EACJS,OAAO,GACPG,MAAM,EACNC,MAAM,I,EAGRC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAIE,OAAOb,KAAOW,EAAIE,OAAOC,S,EAIlCC,oB,uCAAsB,WAAOJ,GAAP,eAAAxB,EAAA,6DACpBwB,EAAIK,iBADgB,SAEDrB,EAAe,EAAKI,MAAML,MAAMM,KAAM,EAAKD,MAAMH,KAFhD,OAEdL,EAFc,OAGpB0B,QAAQC,IAAI3B,GACZ,EAAKqB,SAAS,CACZP,OAAOd,EAAKc,SALM,2C,wDAStBc,eAAiB,SAACR,GAChB,EAAKC,SAAS,CACZJ,MAAM,EAAKT,MAAMS,MAAQ,K,EAI7BY,kB,uCAAoB,WAAO1B,GAAP,eAAAP,EAAA,sEACCM,EAAYC,GADb,OACZH,EADY,OAElB0B,QAAQC,IAAI3B,GACZ,EAAKqB,SAAS,CACZlB,MAAMH,EAAK8B,eACXhB,OAAO,GACPT,IAAI,EACJY,MAAM,IAPU,2C,wDAWpBc,gBAAkB,SAACC,GACjB,IAAMC,EAAW,EAAKzB,MAAMU,MAC5Be,EAASD,IAAOC,EAASD,GACzB,EAAKX,SAAS,CACZH,MAAMe,K,4CAIV,WAAS,IAAD,OACN,OACE,gCACE,8CACA,mCACE,gCACE,gDACA,oBAAIC,UAAU,aAAd,SACG5B,EAAO6B,KAAI,SAAChC,EAAMiC,GAAP,OACV,oBACEF,UAAW/B,IAAQ,EAAKK,MAAML,MAAMM,KAAO,UAAU,GAErD4B,QAAS,kBAAI,EAAKR,kBAAkB1B,IAHtC,SAKGA,GAHIiC,WAQZE,KAAK9B,MAAML,MAAMM,MAChB,gCACE,6BAAK6B,KAAK9B,MAAML,MAAMM,OACtB,8CAAiB6B,KAAK9B,MAAML,MAAMQ,eAClC,+CAAkB2B,KAAK9B,MAAML,MAAMO,gBACnC,yDAA4B4B,KAAK9B,MAAML,MAAMS,YAC7C,4DAA+B0B,KAAK9B,MAAML,MAAMU,WAChD,yCAAYyB,KAAK9B,MAAML,MAAMY,UAC7B,+CAAkBuB,KAAK9B,MAAML,MAAMa,gBAEnC,uBAAMuB,SAAUD,KAAKd,oBAArB,UACE,iEACA,uBACEgB,KAAK,SACL/B,KAAK,MACLgC,IAAI,IACJC,IAAKJ,KAAK9B,MAAML,MAAMU,QACtBU,MAAOe,KAAK9B,MAAMH,IAClBsC,SAAUL,KAAKnB,aACfyB,UAAQ,IAEV,wBAAQV,UAAU,WAAWM,KAAK,SAAlC,yBAMR,iCACGF,KAAK9B,MAAMM,OAAO+B,OACjB,iDAAoBP,KAAK9B,MAAMH,IAA/B,WAA4CiC,KAAK9B,MAAMS,MAAM,EAA7D,MAAmEqB,KAAK9B,MAAMS,MAAM,EAApF,IAAuF,wBAAQoB,QAASC,KAAKV,eAAtB,0BACrF,GAEJ,6BACGU,KAAK9B,MAAMM,OAAOG,MAAMqB,KAAK9B,MAAMS,MAAOqB,KAAK9B,MAAMS,MAAM,GAAGkB,KAAK,SAAAW,GAAC,OACnE,+BACE,qBAAKC,IAAKD,EAAEE,QAASC,IAAG,qBAAgB,EAAKzC,MAAML,MAAMM,KAAjC,qBAAkDqC,EAAEd,GAApD,wBAAsEc,EAAEI,OAAOC,UAA/E,eAA+FL,EAAEM,cACzH,qCAAQN,EAAEd,MACV,yCAAYc,EAAEI,OAAOC,aACrB,6CAAgBL,EAAEM,cAClB,wBAAQf,QAAU,SAAAjB,GAAG,OAAI,EAAKW,gBAAgBe,EAAEd,KAAhD,SACG,EAAKxB,MAAMU,MAAM4B,EAAEd,IAAM,SAAW,WANhCc,EAAEd,mB,GAhHQqB,aCMlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5005d338.chunk.js","sourcesContent":["const api_key = 'fUwiBPvvBwZXfky5QXVrVsSlOmRHlLQXnnZv03dI'\n\nasync function get(url){\n  const fetchResponse = await fetch(url)\n  let data = await fetchResponse.json();\n  if (!fetchResponse.ok) throw data;\n  return data;\n}\n\nexport async function getManifest(rover){\n  const url = `https://api.nasa.gov/mars-photos/api/v1/manifests/${rover}/?api_key=${api_key}`\n  const data = await get(url)\n  return data;\n}\n\nexport async function getPhotosBySol(rover, sol){\n  const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos?sol=${sol}&api_key=${api_key}`\n  const data = await get(url)\n  return data;\n}","import { Component } from \"react\";\nimport { getManifest, getPhotosBySol } from \"./utils/fetch\";\nimport './App.css';\n\nconst rovers = ['Curiosity','Perseverance','Opportunity','Spirit']\n\nexport default class App extends Component{\n\n  state = {\n    rover:{\n      name:'',\n      landing_date:'',\n      launch_date:'',\n      max_date:'',\n      max_sol:'',\n      photos:'',\n      status:'',\n      total_photos:'',\n    },\n    sol:1,\n    photos:[],\n    slice:0,\n    likes:{}\n  }\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  };\n\n  handleRequestPhotos = async (evt) => {\n    evt.preventDefault();\n    const data = await getPhotosBySol(this.state.rover.name, this.state.sol)\n    console.log(data)\n    this.setState({\n      photos:data.photos\n    })\n  }\n\n  handleLoadMore = (evt) => {\n    this.setState({\n      slice:this.state.slice + 6\n    })\n  }\n\n  handleSelectRover = async (rover) => {\n    const data = await getManifest(rover)\n    console.log(data)\n    this.setState({\n      rover:data.photo_manifest,\n      photos:[],\n      sol:1,\n      slice:0\n    })\n  }\n\n  handleClickLike = (id) => {\n    const newLikes = this.state.likes\n    newLikes[id] = !newLikes[id]\n    this.setState({\n      likes:newLikes\n    })\n  }\n\n  render(){ \n    return(\n      <div>\n        <h1>Spacestagram</h1>\n        <header>\n          <div>\n            <h2>Select a rover</h2>\n            <ul className=\"rover-list\">\n              {rovers.map((rover,i)=>(\n                <li \n                  className={rover===this.state.rover.name ? 'current':''} \n                  key={i} \n                  onClick={()=>this.handleSelectRover(rover)}\n                >\n                  {rover}\n                </li>\n              ))}\n            </ul>\n          </div>\n          {this.state.rover.name && \n            <div>\n              <h2>{this.state.rover.name}</h2>\n              <p>Launch date: {this.state.rover.launch_date}</p>\n              <p>Landing date: {this.state.rover.landing_date}</p>\n              <p>Latest day with photos: {this.state.rover.max_date}</p>\n              <dt>Martian days with photos: {this.state.rover.max_sol}</dt>\n              <p>Status: {this.state.rover.status}</p>\n              <p>Total Photos: {this.state.rover.total_photos}</p>\n    \n              <form onSubmit={this.handleRequestPhotos}>\n                <label>show me photos from Sol day:</label>\n                <input \n                  type=\"number\" \n                  name=\"sol\" \n                  min=\"1\" \n                  max={this.state.rover.max_sol} \n                  value={this.state.sol} \n                  onChange={this.handleChange} \n                  required \n                />\n                <button className=\"bg-white\" type=\"submit\">Go</button>\n              </form>\n            </div>\n          }\n        </header>\n        \n        <main>\n          {this.state.photos.length ?\n            <p>Showing Sol day {this.state.sol} photos {this.state.slice+1} - {this.state.slice+6} <button onClick={this.handleLoadMore}>Next page</button></p>\n            : ''\n          }\n          <ul>\n            {this.state.photos.slice(this.state.slice, this.state.slice+6).map( p => (\n              <li key={p.id}>\n                <img src={p.img_src} alt={`Mars rover ${this.state.rover.name} photo id ${p.id}, taken with ${p.camera.full_name} on ${p.earth_date}`}/>\n                <p>ID: {p.id}</p>\n                <p>Camera: {p.camera.full_name}</p>\n                <p>Earth Date: {p.earth_date}</p>\n                <button onClick={ evt => this.handleClickLike(p.id) }>\n                  {this.state.likes[p.id] ? \"Unlike\" : \"Like\"}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </main>\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}