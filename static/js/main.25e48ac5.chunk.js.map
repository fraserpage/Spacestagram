{"version":3,"sources":["utils/fetch.js","components/NextPrevPageButtons.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["api_key","get","url","a","fetch","fetchResponse","json","data","ok","getManifest","rover","getPhotosBySol","sol","NextPrevPageButtons","props","slice","onClick","handleLoadMore","sliceEnd","solInfo","total_photos","App","state","rovers","name","landing_date","launch_date","max_date","max_sol","photos","status","empty","solPicker","likes","photosPerPage","handleChange","evt","setState","target","parseInt","value","handleRequestPhotos","preventDefault","find","e","console","log","loading","length","dir","handleSelectRover","photo_manifest","handleClickLike","id","newLikes","className","this","map","i","onSubmit","type","min","max","onChange","required","earth_date","cameras","c","Math","floor","p","src","img_src","alt","camera","full_name","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25e48ac5.chunk.js","sourcesContent":["const api_key = 'fUwiBPvvBwZXfky5QXVrVsSlOmRHlLQXnnZv03dI'\n\nasync function get(url){\n  const fetchResponse = await fetch(url)\n  let data = await fetchResponse.json();\n  if (!fetchResponse.ok) throw data;\n  return data;\n}\n\nexport async function getManifest(rover){\n  const url = `https://api.nasa.gov/mars-photos/api/v1/manifests/${rover}/?api_key=${api_key}`\n  const data = await get(url)\n  return data;\n}\n\nexport async function getPhotosBySol(rover, sol){\n  const url = `https://api.nasa.gov/mars-photos/api/v1/rovers/${rover}/photos?sol=${sol}&api_key=${api_key}`\n  const data = await get(url)\n  return data;\n}","export default function NextPrevPageButtons(props){\n  return(\n    <>\n      {props.slice > 0 && \n        <button onClick={()=>props.handleLoadMore(-1)}>Previous page</button>\n      }\n      {props.sliceEnd !== props.solInfo.total_photos && \n        <button onClick={()=>props.handleLoadMore(1)}>Next page</button>\n      } \n    </>\n  )\n}","import { Component } from \"react\";\nimport { getManifest, getPhotosBySol } from \"./utils/fetch\";\nimport './App.css';\nimport NextPrevPageButtons from \"./components/NextPrevPageButtons\";\n\nexport default class App extends Component{\n\n  state = {\n    rovers: ['Curiosity','Perseverance','Opportunity','Spirit'],\n    rover:{\n      name:'',\n      landing_date:'',\n      launch_date:'',\n      max_date:'',\n      max_sol:'',\n      photos:[],\n      status:'',\n      total_photos:'',\n    },\n    solInfo:{empty:true},\n    solPicker:0,\n    sol:'',\n    photos:[],\n    slice:0,\n    likes:{},\n    photosPerPage:6\n  }\n\n  handleChange = (evt) => {\n    this.setState({\n      [evt.target.name]: parseInt(evt.target.value),\n    });\n  };\n\n  handleRequestPhotos = async (evt) => {\n    evt.preventDefault();\n    this.setState({\n      sol: this.state.solPicker\n    })\n    const solInfo = this.state.rover.photos.find(e => e.sol === this.state.solPicker)\n    console.log(\"solInfo\",solInfo)\n    if (typeof solInfo === 'undefined'){\n      this.setState({\n        solInfo: {empty: true}\n      })\n    }\n    else{\n      this.setState({\n        solInfo: {\n          empty: false,\n          ...solInfo\n        },\n        loading: true\n      })\n\n      let data = await getPhotosBySol(this.state.rover.name, this.state.sol)\n      // For some reason, the API sometimes gives back an empty object when it ought not too\n      // In these cases, just try it one more time\n      if (data.length !== this.state.solInfo.total_photos){\n        data = await getPhotosBySol(this.state.rover.name, this.state.sol)\n      }\n      console.log(\"photos\",data)\n      this.setState({\n        loading: false,\n        photos: data.photos,\n        slice:0,\n        sliceEnd: \n          this.state.photosPerPage > this.state.solInfo.total_photos ? \n            this.state.solInfo.total_photos \n          : this.state.photosPerPage\n      })\n    }\n  }\n\n  handleLoadMore = (dir) => {\n    this.setState({\n      slice:this.state.slice + (this.state.photosPerPage * dir),\n      sliceEnd: \n        this.state.sliceEnd + (this.state.photosPerPage * dir) > this.state.solInfo.total_photos ? \n            this.state.solInfo.total_photos \n          : this.state.sliceEnd + (this.state.photosPerPage * dir)\n    })\n  }\n\n  handleSelectRover = async (rover) => {\n    const data = await getManifest(rover)\n    console.log(\"rover data\",data)\n    this.setState({\n      rover:data.photo_manifest,\n      photos:[],\n      slice:0\n    })\n  }\n\n  handleClickLike = (id) => {\n    const newLikes = this.state.likes\n    newLikes[id] = !newLikes[id]\n    this.setState({\n      likes:newLikes\n    })\n  }\n\n  render(){ \n    return(\n      <div>\n        <h1>Spacestagram</h1>\n        <header>\n          <div>\n            <h2>Select a rover</h2>\n            <ul className=\"rover-list\">\n              {this.state.rovers.map((rover,i)=>(\n                <li \n                  className={rover===this.state.rover.name ? 'current':''} \n                  key={i} \n                  onClick={()=>this.handleSelectRover(rover)}\n                >\n                  {rover}\n                </li>\n              ))}\n            </ul>\n          </div>\n          {this.state.rover.name && \n            <div>\n              <h2>{this.state.rover.name}</h2>\n              <p>Launch date: <span>{this.state.rover.launch_date}</span></p>\n              <p>Landing date: <span>{this.state.rover.landing_date}</span></p>\n              <p>Latest day with photos: <span>{this.state.rover.max_date}</span></p>\n              <p>Martian days (Sols) with photos: <span>{this.state.rover.max_sol}</span></p>\n              <p>Status: <span>{this.state.rover.status}</span></p>\n              <p>Total Photos: <span>{this.state.rover.total_photos}</span></p>\n    \n              <form onSubmit={this.handleRequestPhotos}>\n                <label>Show me photos from Sol day:</label>\n                <input \n                  type=\"number\" \n                  name=\"solPicker\" \n                  min=\"0\" \n                  max={this.state.rover.max_sol} \n                  value={this.state.solPicker} \n                  onChange={this.handleChange} \n                  required \n                />\n                <button className=\"bg-white\" type=\"submit\">Go</button>\n              </form>\n            </div>\n          }\n          {typeof this.state.sol === 'number' &&\n            <div>\n              <h2>Sol {this.state.sol}</h2>\n              {this.state.solInfo.empty ? \n                <p>No photos from this date</p> \n              : \n                <>\n                  <p>Earth Date: <span>{this.state.solInfo.earth_date}</span></p>\n                  <p>Total Photos: <span>{this.state.solInfo.total_photos}</span></p>\n                  <h3>Cameras in use:</h3>\n                  <ul>\n                    {this.state.solInfo.cameras.map((c,i) => (\n                      <li key={i}>{c}</li>\n                    ))}\n                  </ul>\n                </>\n              }\n            </div>\n          }\n        </header>\n        \n        <main>\n          {this.state.loading &&\n            <div className=\"loading\">Loading...</div>\n          }\n          {this.state.photos.length > 0 && \n            <>\n              <p>Sol {this.state.sol} | Photos {this.state.slice+1} - {this.state.sliceEnd} | Page {this.state.sliceEnd / this.state.photosPerPage}/{Math.floor(this.state.solInfo.total_photos / this.state.photosPerPage)}</p>\n              <NextPrevPageButtons {...this.state} handleLoadMore={this.handleLoadMore}/>\n            </>\n          }\n          <ul>\n            {this.state.photos.slice(this.state.slice, this.state.sliceEnd).map( p => (\n              <li key={p.id}>\n                <img src={p.img_src} alt={`Mars rover ${this.state.rover.name} photo id ${p.id}, taken with ${p.camera.full_name} on ${p.earth_date}`}/>\n                <p>ID: {p.id}</p>\n                <p>Camera: {p.camera.full_name}</p>\n                <p>Earth Date: {p.earth_date}</p>\n                <p>Sol: {p.sol}</p>\n                <button onClick={ evt => this.handleClickLike(p.id) }>\n                  {this.state.likes[p.id] ? \"Unlike\" : \"Like\"}\n                </button>\n              </li>\n            ))}\n          </ul>\n          {this.state.photos.length > 0 && \n            <NextPrevPageButtons {...this.state} handleLoadMore={this.handleLoadMore}/>\n          }\n        </main>\n      </div>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}